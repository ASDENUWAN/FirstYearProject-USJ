/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view.admin;

import controller.ReservationController;
import controller.TableController;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.Table;

/**
 *
 * @author Sachii
 */
public class AddBooking extends javax.swing.JFrame {

    /**
     * Creates new form AddBooking
     */
    private int cusdId ;
    public AddBooking() {
        initComponents();
        setStartTime(0);
        bookingInitial();
    }
     public AddBooking(int cusdId) {
        initComponents();
        this.cusdId = cusdId;
        setStartTime(0);
        bookingInitial();
        errorMsg();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        booking3 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        bookingSavebtn3 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        bookingCancelbtn = new javax.swing.JButton();
        seats = new javax.swing.JComboBox<>();
        stime = new javax.swing.JComboBox<>();
        etime = new javax.swing.JComboBox<>();
        continuosBtn = new javax.swing.JRadioButton();
        specialbtn = new javax.swing.JRadioButton();
        singleBtn = new javax.swing.JRadioButton();
        etimeerror = new javax.swing.JLabel();
        special = new javax.swing.JPanel();
        sDate = new com.toedter.calendar.JDateChooser();
        jLabel26 = new javax.swing.JLabel();
        errormsg2 = new javax.swing.JLabel();
        eDate = new com.toedter.calendar.JDateChooser();
        edatelb = new javax.swing.JLabel();
        sunday = new javax.swing.JCheckBox();
        monday = new javax.swing.JCheckBox();
        tuesday = new javax.swing.JCheckBox();
        wednesday = new javax.swing.JCheckBox();
        saturday = new javax.swing.JCheckBox();
        thusday = new javax.swing.JCheckBox();
        friday = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        tableCount = new javax.swing.JComboBox<>();
        seaterror = new javax.swing.JLabel();
        stimeerror = new javax.swing.JLabel();
        tableError = new javax.swing.JLabel();

        setUndecorated(true);

        booking3.setBackground(new java.awt.Color(51, 51, 51));
        booking3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 40)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("New Booking");
        booking3.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, -1, -1));

        jLabel23.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Seat              :");
        booking3.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 178, -1));

        bookingSavebtn3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        bookingSavebtn3.setText("Save");
        bookingSavebtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingSavebtn3ActionPerformed(evt);
            }
        });
        booking3.add(bookingSavebtn3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 500, -1, -1));

        jLabel24.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Start Time    :");
        booking3.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 178, -1));

        jLabel25.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("End Time     :");
        booking3.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 160, -1));

        bookingCancelbtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        bookingCancelbtn.setText("Cancel");
        bookingCancelbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingCancelbtnMouseClicked(evt);
            }
        });
        bookingCancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingCancelbtnActionPerformed(evt);
            }
        });
        booking3.add(bookingCancelbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 500, -1, -1));

        seats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        seats.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                seatsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                seatsMouseExited(evt);
            }
        });
        seats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatsActionPerformed(evt);
            }
        });
        booking3.add(seats, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 263, 31));

        stime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stimeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                stimeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                stimeMouseExited(evt);
            }
        });
        stime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stimeActionPerformed(evt);
            }
        });
        booking3.add(stime, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 263, 31));

        etime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                etimeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                etimeMouseExited(evt);
            }
        });
        etime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etimeActionPerformed(evt);
            }
        });
        booking3.add(etime, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, 263, 31));

        continuosBtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        continuosBtn.setText("Continuos");
        continuosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuosBtnActionPerformed(evt);
            }
        });
        booking3.add(continuosBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, 120, -1));

        specialbtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        specialbtn.setText("Special");
        specialbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specialbtnActionPerformed(evt);
            }
        });
        booking3.add(specialbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 220, 98, -1));

        singleBtn.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        singleBtn.setText("Single Date");
        singleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleBtnActionPerformed(evt);
            }
        });
        booking3.add(singleBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 140, -1));

        etimeerror.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        etimeerror.setForeground(new java.awt.Color(207, 0, 51));
        booking3.add(etimeerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 260, 20));

        special.setBackground(new java.awt.Color(102, 102, 102));
        special.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                sDateMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sDateMouseReleased(evt);
            }
        });
        sDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sDateKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sDateKeyTyped(evt);
            }
        });
        special.add(sDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 6, 216, 32));

        jLabel26.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Start Date    :");
        special.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 14, 160, -1));

        errormsg2.setForeground(new java.awt.Color(207, 0, 51));
        special.add(errormsg2, new org.netbeans.lib.awtextra.AbsoluteConstraints(507, 182, 200, 25));

        eDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eDateKeyTyped(evt);
            }
        });
        special.add(eDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 45, 216, 32));

        edatelb.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        edatelb.setForeground(new java.awt.Color(255, 255, 255));
        edatelb.setText("End Date     :");
        special.add(edatelb, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 53, 160, -1));

        sunday.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        sunday.setText("Sunday");
        sunday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sundayActionPerformed(evt);
            }
        });
        special.add(sunday, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 85, -1));

        monday.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        monday.setText("Monday");
        monday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mondayActionPerformed(evt);
            }
        });
        special.add(monday, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 85, -1));

        tuesday.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tuesday.setText("Tuesday");
        tuesday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tuesdayActionPerformed(evt);
            }
        });
        special.add(tuesday, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 85, -1));

        wednesday.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        wednesday.setText("Wednesday");
        wednesday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wednesdayActionPerformed(evt);
            }
        });
        special.add(wednesday, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 100, -1, -1));

        saturday.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saturday.setText("Saturday");
        saturday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saturdayActionPerformed(evt);
            }
        });
        special.add(saturday, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, 85, -1));

        thusday.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        thusday.setText("Thusday");
        thusday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thusdayActionPerformed(evt);
            }
        });
        special.add(thusday, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 85, -1));

        friday.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        friday.setText("Friday");
        friday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fridayActionPerformed(evt);
            }
        });
        special.add(friday, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 85, -1));

        booking3.add(special, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 520, 170));

        jLabel27.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Table    :");
        booking3.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 160, -1));

        tableCount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableCountMouseEntered(evt);
            }
        });
        tableCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableCountActionPerformed(evt);
            }
        });
        booking3.add(tableCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, 216, 30));

        seaterror.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        seaterror.setForeground(new java.awt.Color(207, 0, 51));
        booking3.add(seaterror, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 260, 20));

        stimeerror.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        stimeerror.setForeground(new java.awt.Color(207, 0, 51));
        booking3.add(stimeerror, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, 270, 20));

        tableError.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        tableError.setForeground(new java.awt.Color(207, 0, 51));
        booking3.add(tableError, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 460, 260, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(booking3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(booking3, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bookingSavebtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingSavebtn3ActionPerformed
        Date sdate  = sDate.getDate();
        Date edate = eDate.getDate();
        if(seats.getSelectedItem() == null||stime.getSelectedItem() == null||etime.getSelectedItem() == null||sdate == null){
            JOptionPane.showMessageDialog(this, "Please filled above all fields..");
            errorMsg();
        }else{
            
            
            String sests = seats.getSelectedItem().toString();
            String sTime = stime.getSelectedItem().toString();
            String eTime = etime.getSelectedItem().toString();

            
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH.mm");
            LocalTime starttime = LocalTime.parse(sTime, formatter);
            LocalTime endtime = LocalTime.parse(eTime, formatter);
            LocalDate sd = sdate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDateTime startDateTime = LocalDateTime.of(sd, starttime);
            LocalDateTime endDateTime = LocalDateTime.of(sd, endtime);
            
            
            
            if(tableCount.getSelectedItem()!=null){
                int tablno = Integer.parseInt(tableCount.getSelectedItem().toString());
                Table table = TableController.getTable(tablno);
                if(singleBtn.isSelected()){
                    validateDate();
                    if(ReservationController.makeReservation(table, startDateTime, endDateTime, 1)){
                        JOptionPane.showMessageDialog(this, "Booking Added..!");
                        bookingAllclear();
                    }
                }
                if(continuosBtn.isSelected()&&edate!=null){
                    validateEndDate();
                    LocalDate ed = edate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                    endDateTime = LocalDateTime.of(ed, endtime);
                    if(ReservationController.makeReservation(table, startDateTime, endDateTime, 1)){
                        JOptionPane.showMessageDialog(this, "Booking Added..!");
                        bookingAllclear();
                    }else{
                        JOptionPane.showMessageDialog(this, "Continues booking not Added..!");
                    }
                }
                if(specialbtn.isSelected()&&edate!=null){
                    LocalDate ed = edate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                    endDateTime = LocalDateTime.of(ed, endtime);
                    System.out.println("test");
                    if(countDay()>0){
                        DayOfWeek[] days = new DayOfWeek[countDay()];
                        System.out.println("test");
                        int i =0;
                        if(monday.isSelected())
                            days[i++]=DayOfWeek.MONDAY;
                        if(tuesday.isSelected())
                            days[i++]=DayOfWeek.TUESDAY;
                        if(wednesday.isSelected())
                            days[i++]=DayOfWeek.WEDNESDAY;
                        if(thusday.isSelected())
                            days[i++]=DayOfWeek.THURSDAY;
                        if(friday.isSelected())
                            days[i++]=DayOfWeek.FRIDAY;
                        if(saturday.isSelected())
                            days[i++]=DayOfWeek.SATURDAY;
                        if(sunday.isSelected())
                            days[i++]=DayOfWeek.SUNDAY;
                        if(ReservationController.makeReservation(table, sd, ed, starttime, endtime, days, 1)){
                            JOptionPane.showMessageDialog(this, "Special Booking Added..!");
                            bookingAllclear();
                        }else
                            JOptionPane.showMessageDialog(this, "Special booking is not added!");
                    }else{
                        JOptionPane.showMessageDialog(this, "Special booking is not added!");
                    }
                }
            }else
                JOptionPane.showMessageDialog(this, "Please select table number.");
            
        }
    }//GEN-LAST:event_bookingSavebtn3ActionPerformed

    private void bookingCancelbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingCancelbtnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_bookingCancelbtnMouseClicked

    private void bookingCancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingCancelbtnActionPerformed
        bookingAllclear();
        this.dispose();
    }//GEN-LAST:event_bookingCancelbtnActionPerformed

    private void seatsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seatsMouseEntered
        errorMsg();
    }//GEN-LAST:event_seatsMouseEntered

    private void seatsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seatsMouseExited
        errorMsg();
    }//GEN-LAST:event_seatsMouseExited

    private void seatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatsActionPerformed
        seaterror.setText("");
        tableCountClear();
    }//GEN-LAST:event_seatsActionPerformed

    private void stimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stimeMouseClicked

    }//GEN-LAST:event_stimeMouseClicked

    private void stimeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stimeMouseEntered
        errorMsg();
    }//GEN-LAST:event_stimeMouseEntered

    private void stimeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stimeMouseExited
        errorMsg();
    }//GEN-LAST:event_stimeMouseExited

    private void stimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stimeActionPerformed
        String sTime = stime.getSelectedItem().toString();
        int s = Integer.parseInt(sTime.substring(0, 2)); //08:00
        int size = 20-s;
        String etimeList[]= new String[size];
        stimeerror.setText("");
        etimeerror.setText("Please select end time.");
        for (int i = 0; i < size; i++) {
            etimeList[i] = String.format("%02d.00", i+s+1);

        }

        etime.setModel(new DefaultComboBoxModel<>(etimeList));
    }//GEN-LAST:event_stimeActionPerformed

    private void etimeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_etimeMouseEntered
        errorMsg();
    }//GEN-LAST:event_etimeMouseEntered

    private void etimeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_etimeMouseExited
        errorMsg();
    }//GEN-LAST:event_etimeMouseExited

    private void etimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etimeActionPerformed
        etimeerror.setText("");
    }//GEN-LAST:event_etimeActionPerformed

    private void continuosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuosBtnActionPerformed
        singleBtn.setSelected(false);
        continuosBtn.setSelected(true);
        specialbtn.setSelected(false);
        bookingAllclear();
        errorMsg();
        eDate.setEnabled(true);
        edatelb.setEnabled(true);
        daysEnable(false);
    }//GEN-LAST:event_continuosBtnActionPerformed

    private void specialbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specialbtnActionPerformed
        singleBtn.setSelected(false);
        continuosBtn.setSelected(false);
        specialbtn.setSelected(true);
        bookingAllclear();
        errorMsg();
        eDate.setEnabled(true);
        edatelb.setEnabled(true);
        daysEnable(true);
    }//GEN-LAST:event_specialbtnActionPerformed

    private void singleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleBtnActionPerformed
        bookingInitial();
        errorMsg();
    }//GEN-LAST:event_singleBtnActionPerformed

    private void sDateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sDateMouseExited

    }//GEN-LAST:event_sDateMouseExited

    private void sDateMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sDateMouseReleased

    }//GEN-LAST:event_sDateMouseReleased

    private void sDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sDateKeyReleased

    }//GEN-LAST:event_sDateKeyReleased

    private void sDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sDateKeyTyped

    }//GEN-LAST:event_sDateKeyTyped

    private void eDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eDateKeyTyped

    }//GEN-LAST:event_eDateKeyTyped

    private void sundayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sundayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sundayActionPerformed

    private void mondayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mondayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mondayActionPerformed

    private void tuesdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tuesdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tuesdayActionPerformed

    private void wednesdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wednesdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wednesdayActionPerformed

    private void saturdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saturdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saturdayActionPerformed

    private void thusdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thusdayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_thusdayActionPerformed

    private void fridayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fridayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fridayActionPerformed

    private void tableCountMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCountMouseEntered
        tableCountClear();
        if(singleBtn.isSelected()){
            validateDate();
            bookingValidation();
            //tableError.setText("Select table.");
        }
        else{
            validateEndDate();
            bookingValidation();
            //tableError.setText("Select table.");
        }
        //bookingValidation();
    }//GEN-LAST:event_tableCountMouseEntered

    private void tableCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableCountActionPerformed
        //errorMsg();
        if(tableCount.getSelectedItem()==null)
        tableError.setText("Select table number.");
    }//GEN-LAST:event_tableCountActionPerformed
    private void bookingAllclear(){
    setDateNull();
    setDaysclear();
    errorMsgClear();
    tableCountClear();
}  
    private void daysEnable(boolean t){
    monday.setEnabled(t);
    tuesday.setEnabled(t);
    wednesday.setEnabled(t);
    thusday.setEnabled(t);
    friday.setEnabled(t);
    saturday.setEnabled(t);
    sunday.setEnabled(t);
}
    private void bookingInitial(){
        singleBtn.setSelected(true);
        continuosBtn.setSelected(false);
        specialbtn.setSelected(false);
        eDate.setEnabled(false);
        edatelb.setEnabled(false);
        daysEnable(false);
        bookingAllclear();
    }
    private void setStartTime(int currentHour){
         // Get current hour
        if(currentHour<8)
            currentHour = 8;
        int size = 22 - currentHour; // Adjust size based on current hour
        String stimeList[] = new String[size];

        // Start the loop from the current hour
        for (int i = 0; i < size; i++) {
            int hour = currentHour + i; // Calculate the hour for this iteration

            // Format the hour and populate the array
            stimeList[i] = String.format("%02d.00", hour);
        }

        // Set the model for the combo box
        stime.setModel(new DefaultComboBoxModel<>(stimeList));
    }
    private void bookingValidation(){
        
        Date sdate  = sDate.getDate();
        Date edate = eDate.getDate();
        
        if(seats.getSelectedItem() == null||stime.getSelectedItem() == null||etime.getSelectedItem() == null||sdate == null){
            //JOptionPane.showMessageDialog(this, "Please filled above all fields..");
            errorMsg();
        }else{
            String sests = seats.getSelectedItem().toString();
            String sTime = stime.getSelectedItem().toString();
            String eTime = etime.getSelectedItem().toString();

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH.mm");
            LocalTime starttime = LocalTime.parse(sTime, formatter);
            LocalTime endtime = LocalTime.parse(eTime, formatter);
            LocalDate sd = sdate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDateTime startDateTime = LocalDateTime.of(sd, starttime);
            LocalDateTime endDateTime = LocalDateTime.of(sd, endtime);
            
            ArrayList<String>tables = new ArrayList<>();
            if(singleBtn.isSelected()){
                for (Table availableTable : ReservationController.getAvailableTables(Integer.parseInt(sests), startDateTime, endDateTime)) {
                   tables.add(availableTable.getTableNumber()+"");
                }
            }
            if(continuosBtn.isSelected()&&edate!=null){
                LocalDate ed = edate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                endDateTime = LocalDateTime.of(ed, endtime);
                for (Table availableTable : ReservationController.getAvailableTables(Integer.parseInt(sests), startDateTime, endDateTime)) {
                   tables.add(availableTable.getTableNumber()+"");
                }
            }
            if(specialbtn.isSelected()&&edate!=null){
                LocalDate ed = edate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                endDateTime = LocalDateTime.of(ed, endtime);
                if(countDay()>0){
                    DayOfWeek[] days = new DayOfWeek[countDay()];
                    int i =0;
                    if(monday.isSelected())
                        days[i++]=DayOfWeek.MONDAY;
                    if(tuesday.isSelected())
                        days[i++]=DayOfWeek.TUESDAY;
                    if(wednesday.isSelected())
                        days[i++]=DayOfWeek.WEDNESDAY;
                    if(thusday.isSelected())
                        days[i++]=DayOfWeek.THURSDAY;
                    if(friday.isSelected())
                        days[i++]=DayOfWeek.FRIDAY;
                    if(saturday.isSelected())
                        days[i++]=DayOfWeek.SATURDAY;
                    if(sunday.isSelected())
                        days[i++]=DayOfWeek.SUNDAY;
                    for (Table availableTable : ReservationController.getAvailableTablesForSpecificDays(Integer.parseInt(sests), starttime, endtime, sd, ed, days)) {
                        tables.add(availableTable.getTableNumber()+"");
                    }
                }else{
                    for (Table availableTable : ReservationController.getAvailableTables(Integer.parseInt(sests), startDateTime, endDateTime)) {
                        tables.add(availableTable.getTableNumber()+"");
                    }
                }
            }
            String[] tableArray = tables.toArray(new String[0]);
            if(tableArray.length==0)
                JOptionPane.showMessageDialog(this, "Not available.");
            else
                //errormsg.setText("");
                tableCount.setModel(new DefaultComboBoxModel<>(tableArray));
            
        }
    }
    
    private void errorMsg(){
        if(seats.getSelectedItem()==null)
            seaterror.setText("Please select seats.");
        else
            seaterror.setText("");
        if(stime.getSelectedItem()==null)
            stimeerror.setText("Please select start time.");
        else
            stimeerror.setText("");
        if(etime.getSelectedItem()==null)
            etimeerror.setText("Please select start time first.");
        else
            etimeerror.setText("");
        
    }
    private void errorMsgClear(){
        seaterror.setText("");
        stimeerror.setText("");
        etimeerror.setText("");
        tableError.setText("");
    }
    private void setDateNull(){
        sDate.setDate(null);
        eDate.setDate(null);
    }
    
    private int countDay(){
    int count=0;
    if(monday.isSelected())
        ++count;
    if(tuesday.isSelected())
        ++count;
    if(wednesday.isSelected())
        ++count;
    if(thusday.isSelected())
        ++count;
    if(friday.isSelected())
        ++count;
    if(saturday.isSelected())
        ++count;
    if(sunday.isSelected())
        ++count;
    return count;
}
    private void setDaysclear(){
    monday.setSelected(false);
    tuesday.setSelected(false);
    wednesday.setSelected(false);
    thusday.setSelected(false);
    friday.setSelected(false);
    saturday.setSelected(false);
    sunday.setSelected(false);
}
private void tableCountClear(){
    String[] tableArray = new String[0];
    tableCount.setModel(new DefaultComboBoxModel<>(tableArray));
}


private void validateDate() {
    Date sdate = sDate.getDate();

    if (sdate != null) { // Check if a date is selected
        LocalDate selectedDate = sdate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate currentDate = LocalDate.now();

        if (selectedDate.isBefore(currentDate)) {
            // Display message indicating the selected date is in the past
            JOptionPane.showMessageDialog(this, "Please select a future date.", "Invalid Date", JOptionPane.WARNING_MESSAGE);
            sDate.setDate(null); // Clear the date field or handle it according to your application's logic
        }
//        if (selectedDate.isEqual(currentDate)) {
//            
//            stimeerror.setText("Please re-select start time.");
//            setStartTime(LocalTime.now().getHour());
//            stime.setSelectedItem(null);
//            etimeerror.setText("Please select start time first.");
//        }
    }else{
        JOptionPane.showMessageDialog(this, "Please select a start date.", "Invalid Date", JOptionPane.WARNING_MESSAGE);
        tableCount.setSelectedItem(null);
    }
}
    private void validateEndDate() {
        Date sdate = sDate.getDate();
        Date edate = eDate.getDate();
        validateDate();
        if (sdate != null) { // Check if a date is selected
            LocalDate selectedDate = sdate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if(edate!=null){
                LocalDate selectedendDate = edate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                if (selectedendDate.isBefore(selectedDate)) {
                    // Display message indicating the selected date is in the past
                    JOptionPane.showMessageDialog(this, "Please select valid EndDate.", "Invalid Date", JOptionPane.WARNING_MESSAGE);
                    eDate.setDate(null); // Clear the date field or handle it according to your application's logic
                }
            }else{
                JOptionPane.showMessageDialog(this, "Please select a end date.", "Invalid Date", JOptionPane.WARNING_MESSAGE);
                tableCount.setSelectedItem(null);
            }


        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel booking3;
    private javax.swing.JButton bookingCancelbtn;
    private javax.swing.JButton bookingSavebtn3;
    private javax.swing.JRadioButton continuosBtn;
    private com.toedter.calendar.JDateChooser eDate;
    private javax.swing.JLabel edatelb;
    private javax.swing.JLabel errormsg2;
    private javax.swing.JComboBox<String> etime;
    private javax.swing.JLabel etimeerror;
    private javax.swing.JCheckBox friday;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JCheckBox monday;
    private com.toedter.calendar.JDateChooser sDate;
    private javax.swing.JCheckBox saturday;
    private javax.swing.JLabel seaterror;
    private javax.swing.JComboBox<String> seats;
    private javax.swing.JRadioButton singleBtn;
    private javax.swing.JPanel special;
    private javax.swing.JRadioButton specialbtn;
    private javax.swing.JComboBox<String> stime;
    private javax.swing.JLabel stimeerror;
    private javax.swing.JCheckBox sunday;
    private javax.swing.JComboBox<String> tableCount;
    private javax.swing.JLabel tableError;
    private javax.swing.JCheckBox thusday;
    private javax.swing.JCheckBox tuesday;
    private javax.swing.JCheckBox wednesday;
    // End of variables declaration//GEN-END:variables
}
